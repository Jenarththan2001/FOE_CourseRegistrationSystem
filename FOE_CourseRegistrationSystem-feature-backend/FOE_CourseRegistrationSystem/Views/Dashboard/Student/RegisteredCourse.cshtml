@{
    var student = ViewData["Student"] as FOE_CourseRegistrationSystem.Models.Student;
    var registeredCourses = ViewData["RegisteredCourses"] as List<FOE_CourseRegistrationSystem.Models.Registration>;
    var pendingRegistrations = ViewData["PendingRegistrations"] as List<FOE_CourseRegistrationSystem.Models.PendingRegistration>;
    var coursePrerequisites = ViewData["CoursePrerequisites"] as Dictionary<string, List<string>>;
    Layout = null;
}

@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registered & Pending Courses</title>
    <link rel="stylesheet" href="~/css/RegisteredCourse_style.css">
    <link rel="stylesheet" href="~/css/StudentDashboard_style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>

<body>
    <div class="container">
        <!-- Sidebar -->
        <div class="sidebar" id="sidebar">
            <div class="logo">
                <span>FOE UOJ</span>
            </div>
            <ul class="nav-links">
                <li>
                    <a href="@Url.Action("Dashboard", "Student")"><i class="fas fa-home"></i><span>Dashboard</span></a>
                </li>
                <li class="active">
                    <a href="@Url.Action("CourseRegistration", "Student")"><i class="fas fa-book"></i><span>Course Registration</span></a>
                </li>
                <li>
                    <a href="@Url.Action("ResultPage", "Student")"><i class="fas fa-chart-bar"></i><span>Results</span></a>
                </li>

                <div class="bottom-links">
                    <li class="bottom-items">
                        <a href="@Url.Action("StudentNotification", "Student")"><i class="fas fa-bell"></i><span>Notifications</span></a>
                    </li>
                    <li class="bottom-items">
                        <a href="@Url.Action("FAQs", "Student")"><i class="fas fa-question-circle"></i><span>FAQs</span></a>
                    </li>
                    <li class="bottom-items">
                        <a href="~/Account/Login"><i class="fas fa-sign-out-alt"></i><span>Log out</span></a>
                    </li>
                </div>
            </ul>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <!-- Header -->
            <div class="header">
                <h1>Registered & Pending Courses</h1>
                <div class="user-info">
                    <div class="profile-pic">
                        <img id="admin-profile" src="~/images/profile.png" alt="Admin Profile">
                    </div>
                    <span id="student-id">| @(student != null ? student.FullName : "Unknown")</span> 
                    <span id="date-time">| Date: <span id="current-date"></span> | Time: <span id="current-time"></span></span>
                </div>
            </div>

            <button class="back-btn" onclick="goBack()"><i class="fas fa-arrow-left"></i> Back</button>

            <!-- Filter Section -->
            <div class="filter-section">
            <label for="semesterFilter">Filter by Semester</label>
                <select id="semesterFilter">
                    <option value="">All Semester</option>
                    @foreach (var semester in registeredCourses.Select(c => c.CourseOffering.Semester)
                                  .Concat(pendingRegistrations.Select(p => p.RegistrationSessionCourse?.Course?.Semester))
                                  .Where(s => !string.IsNullOrEmpty(s))
                                  .Distinct())
                    {
                                <option value="@semester">Semester @semester</option>
                    }
                </select>
            </div>

            <!-- Course Table -->
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Course Code</th>
                            <th>Course Name</th>
                            <th>Credits</th>
                            <th>Semester</th> <!-- ✅ Added Semester Column -->
                            <th>Pre-requisites</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody id="courseTableBody">
                        <!-- ✅ Registered Courses -->
                        @foreach (var registration in registeredCourses)
                        {
                            string courseCode = registration.CourseOffering.Course.CourseCode;
                            string semester = registration.CourseOffering.Semester;
                            string prerequisiteText = coursePrerequisites.ContainsKey(courseCode)
                                ? string.Join(", ", coursePrerequisites[courseCode])
                                : "None";

                                    <tr data-semester="@semester">
                                        <td>@courseCode</td>
                                        <td>@registration.CourseOffering.Course.CourseName</td>
                                        <td>@registration.CourseOffering.Course.Credit</td>
                                        <td>@semester</td> <!-- ✅ Display Semester -->
                                        <td>@prerequisiteText</td>
                                        <td class="status-approved">
                                            <i class="fas fa-check-circle"></i> 
                                        </td>
                                    </tr>
                        }

                        <!-- ✅ Pending & Rejected Courses -->
                        @foreach (var pending in pendingRegistrations)
                        {
                            string courseCode = pending.CourseCode;
                            string courseName = pending.RegistrationSessionCourse?.Course?.CourseName ?? "N/A";
                            string credit = pending.RegistrationSessionCourse?.Course?.Credit.ToString() ?? "N/A";
                            string semester = pending.RegistrationSessionCourse?.Course?.Semester ?? "N/A";
                                <!-- ✅ Fetch Semester -->
                            string prerequisiteText = coursePrerequisites.ContainsKey(courseCode)
                                ? string.Join(", ", coursePrerequisites[courseCode])
                                : "None";

                                    <tr data-semester="@semester">
                                        <td>@courseCode</td>
                                        <td>@courseName</td>
                                        <td>@credit</td>
                                        <td>@semester</td> <!-- ✅ Display Semester -->
                                        <td>@prerequisiteText</td>
                                        <td class="@(pending.Status == "Rejected" ? "status-rejected" : "status-pending")">
                                            <i class="fas @(pending.Status == "Rejected" ? "fa-times-circle" : "fa-hourglass-half")"></i>
                                    @pending.Status
                                        </td>
                                    </tr>
                        }
                    </tbody>
                </table>
            </div>
        <div class="pagination-container">
            <div class="pagination-info">
                Showing <span id="start-record">1</span> to <span id="end-record">10</span> of <span id="total-records">0</span> entries
            </div>
            <div class="pagination-controls">
                <button id="prev-page" disabled><i class="fas fa-chevron-left"></i> Previous</button>
                <div id="page-numbers" class="page-numbers"></div>
                <button id="next-page">Next <i class="fas fa-chevron-right"></i></button>
            </div>
        </div>
        </div>
    </div>

  <script>
              function goBack() {
           window.history.back();
        }

        document.addEventListener("DOMContentLoaded", function () {
            const semesterFilter = document.getElementById("semesterFilter");
            const courseTableBody = document.getElementById("courseTableBody");

            semesterFilter.addEventListener("change", filterCourses);

            function filterCourses() {
                const selectedSemester = semesterFilter.value;
                const rows = courseTableBody.getElementsByTagName("tr");

                for (let row of rows) {
                    const courseSemester = row.getAttribute("data-semester");

                    if (selectedSemester === "" || courseSemester === selectedSemester) {
                        row.style.display = "";
                    } else {
                        row.style.display = "none";
                    }
                }
            }
        });

        function updateTime() {
            const currentDate = new Date();
            document.getElementById("current-date").textContent = currentDate.toLocaleDateString();
            document.getElementById("current-time").textContent = currentDate.toLocaleTimeString();
        }

        setInterval(updateTime, 1000);
        updateTime();

                // Pagination functionality
        const itemsPerPage = 10; // Number of items to display per page
        let currentPage = 1;

        function displayItems(page) {
            const tableBody = document.getElementById('courseTableBody');
            const rows = tableBody.getElementsByTagName('tr');
            const startIndex = (page - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;

            for (let i = 0; i < rows.length; i++) {
                if (i >= startIndex && i < endIndex) {
                    rows[i].style.display = '';
                } else {
                    rows[i].style.display = 'none';
                }
            }
        }

        function updatePagination() {
            const tableBody = document.getElementById('courseTableBody');
            const totalItems = tableBody.getElementsByTagName('tr').length;
            const totalPages = Math.ceil(totalItems / itemsPerPage);

            const paginationContainer = document.querySelector('.pagination-container');
            const paginationInfo = paginationContainer.querySelector('.pagination-info');
            const pageNumbers = paginationContainer.querySelector('#page-numbers');
            const prevButton = paginationContainer.querySelector('#prev-page');
            const nextButton = paginationContainer.querySelector('#next-page');

            paginationInfo.innerHTML = `Showing ${(currentPage - 1) * itemsPerPage + 1} to ${Math.min(currentPage * itemsPerPage, totalItems)} of ${totalItems} entries`;

            pageNumbers.innerHTML = '';
            for (let i = 1; i <= totalPages; i++) {
                const pageLink = document.createElement('a');
                pageLink.href = '#';
                pageLink.textContent = i;
                if (i === currentPage) {
                    pageLink.classList.add('active');
                }
                pageLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    currentPage = i;
                    displayItems(currentPage);
                    updatePagination();
                });
                pageNumbers.appendChild(pageLink);
            }

            prevButton.disabled = currentPage === 1;
            nextButton.disabled = currentPage === totalPages;

            prevButton.addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    displayItems(currentPage);
                    updatePagination();
                }
            });

            nextButton.addEventListener('click', () => {
                if (currentPage < totalPages) {
                    currentPage++;
                    displayItems(currentPage);
                    updatePagination();
                }
            });
        }

        // Initialize pagination
        displayItems(currentPage);
        updatePagination();

    </script>
</body>

</html>
